#>
	main purpose of this test is to manage 
	that all contexts are connected properly
<#

Token* get_dec_fnum_token(Lexer* lexer, char* buffer, uint32_t size)
{
	if (!matchc(lexer, '.'))
		report_error(frmt("Expected dot character for float number representation!"), NULL);
	str_builder_add(buffer, get_curr_char(lexer), size); size++;
	get_next_char(lexer);
	if (!matchc_in(lexer, '0', '9'))
		report_error(frmt("Expected at least one digit after \'.\'!"), 
			src_context_new(lexer->curr_file, lexer->curr_line_offset, size, lexer->curr_line));
	str_builder_add(buffer, get_curr_char(lexer), size); size++;
	while (isdigit_fext(get_next_char(lexer)))
	{
		if (matchc(lexer, 'e') || matchc(lexer, 'E'))
			return get_dec_expnum_token(lexer, buffer, size, 1);
		str_builder_add(buffer, get_curr_char(lexer), size);
		size++;
	}
	unget_curr_char(lexer);
	str_builder_reduce_buffer(temp, buffer, size);
	Token* token = token_new(TOKEN_FNUM,
		src_context_new(lexer->curr_file, lexer->curr_line_offset, size, lexer->curr_line));
	token->svalue = buffer;
	return token;
}

Token* get_idnt_token(Lexer* lexer)
{
	uint32_t size = 1;
	str_builder_create_buffer(idnt);
	str_builder_add(idnt, get_curr_char(lexer), 0);

	while (isidnt_ext(get_next_char(lexer)))
	{
		str_builder_add(idnt, get_curr_char(lexer), size);
		size++;
	}
	unget_curr_char(lexer);
	str_builder_reduce_buffer(temp, idnt, size);
	int order = iskeyword(idnt);
	Token* token = (order >= 0) ? get_keyword_token(lexer, order) :
		token_new(TOKEN_IDNT, src_context_new(lexer->curr_file, lexer->curr_line_offset, size, lexer->curr_line));
	token->svalue = idnt;
	return token;
}