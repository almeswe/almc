fnc cdecl from("msvcrt") 
	printf(fmt: char*, ...) : void;

fnc cdecl from("msvcrt")
	scanf(fmt: char*, ...) : i32;

fnc cdecl from("msvcrt")
	malloc(_s: u32) : u8*;

fnc cdecl from("msvcrt")
	calloc(_n: u32, _s: u32) : u8*;

fnc cdecl from("msvcrt")
	free(_p: u8*) : void;

fnc cdecl from("msvcrt") 
	assert(_expr: i32) : void;

#>fnc goto_stmt_test() : void {
	goto a;
	printf("not a");
	label a:
	printf("a");
}

fnc relative_expr_test() : void {
	let a: i32 = 2;
	let b: i32 = 5;

	printf("%d < %d = %d\n", a, b, a < b);
	printf("%d < %d = %d\n", b, a, b < a);

	printf("%d > %d = %d\n", a, b, a > b);
	printf("%d > %d = %d\n", b, a, b > a);

	printf("%d >= %d = %d\n", a, b, a >= b);
	printf("%d >= %d = %d\n", b, a, b >= a);

	printf("%d <= %d = %d\n", a, b, a <= b);
	printf("%d <= %d = %d\n", b, a, b <= a);

	printf("%d == %d = %d\n", a, b, a == b);
	printf("%d == %d = %d\n", b, a, b == a);

	printf("%d != %d = %d\n", a, b, a != b);
	printf("%d != %d = %d\n", b, a, b != a);

	printf("%d || %d = %d\n", a, b, a || b);
	printf("%d || %d = %d\n", b, a, b || a);

	printf("%d && %d = %d\n", a, b, a && b);
	printf("%d && %d = %d\n", b, a, b && a);
}<#

#>fnc binary_ptr_accessor_test() : void {
	struct b {
		a: i16;
		b: i32;
	}
	
	struct a {
		a: i16;
		c: i32;
		b: b*;
	}

	let var: a* = cast(a*)
		malloc(1u*sizeof(a));
	#var->c = 2;
	#var->b->b = 3;
	let a: b;
	a.a = cast(i16)4;
	#printf("%d; %d", var->c, var->b.b);
	#free(cast(u8*)var);
}<#

#>fnc recursion(a: i32) : i32 {
	if (a > 100)
		return a;
	printf("%d", a);
	return recursion(a+1);
}<#

#>fnc while_loop_test() {
	let i: i32 = 0;
	let j: i32 = 0; 

	while (i != 0xf)
	{
		j = 0;
		while (j != 0xf)
			printf("%d:%d\n", i, j += 1);
		i += 1;
	}

	while (1) {
		printf("%d\n", i);
		if ((i += 1) == 10)
			break;
	}
	printf("Ended!\n"); 

	while (i != 100) {
		if ((i += 1) % 2 != 0)
			continue;
		printf("%d\n", i);
	}
	printf("Ended!\n");
}

fnc do_loop_test() {
	let i: i32 = 0;
	
	do {
		printf("In body\n");
	} while (0);
	printf("Ended!");

	i = 0;
	do {
		if ((i += 1) % 2 == 0)
			continue;
		printf("%d\n", i);
	} while(i < 100);

	i = 0;
	do {
		if ((i += 1) == 100)
			break;
		printf("%d\n", i);
	} while(1);
}

fnc for_loop_test() {
	let size: i32 = 10;

	for (let i: i32 = 0; i < size; i += 1)
		for (let j: i32 = i+1; j < size; j += 1)
			printf("1. %d:%d\n", i, j);

	for (let z: i32 = 0; z < 20;)
		printf("2. %d\n", z += 3);
	
	for (let f: i32 = 0; ; f += 1) {
		if (f > 100)
			break;
		if (f % 2 == 0)
			continue;
		printf("5. %d\n", f);
	}

	for (;;) {
		printf("4. %d\n", size += 1);
		if (size == 1000)
			break;
	}
}

fnc unary_lg_not_test() {
	let a: i32;
	while (1) {
		scanf("%d", &a);
		printf("\n%d\n", !a);
	}
} 

fnc ternary_expr_test() : void {
	let a: i32;
	while (1) {
		if (scanf("%d", &a))
			printf(a ? "true\n" : "false\n");
	}
}

fnc binary_comma_expr_test() : i32 {
	let a: i32;
	return printf("comma expr test"), a = 2, a;
}

struct object {
	a: i32;
	b: i32;
}

fnc array_test() : void {
	let a: i32[1][2][3];
	a[0][0][0] = 1; 
	a[0][1][0] = 2; 
	a[0][0][1] = 3; 
	a[0][1][1] = 4;
	a[0][0][2] = 5;
	a[0][1][2] = 6;
	
	let b: i16[2][2][2];
	b[0][0][0] = cast(i16)1;
	b[1][0][0] = cast(i16)2;
	b[0][1][0] = cast(i16)3;
	b[1][1][0] = cast(i16)4;
	b[0][0][1] = cast(i16)5;
	b[1][0][1] = cast(i16)6;
	b[0][1][1] = cast(i16)7;
	b[1][1][1] = cast(i16)8;
}

fnc array_test2() {
	let array: i32[4][5];
	for (let i: i32 = 0; i < 4; i += 1)
		for (let j: i32 = 0; j < 5; j += 1)
			array[i][j] = i * j, 
				printf("%d:%d %d\n", i, j, array[i][j]); 
}<#

#>
fnc array_test3() : void {
	struct type2 {
		m3: i32[2][3];
	}

	struct type {
		m1: i32;
		m2: type2;
	}

	let var: type;
	#var.m1 = 2;
	
	for (let i: i32 = 0; i < 2; i += 1)
		for (let j: i32 = 0; j < 3; j += 1)
			var.m2.m3[i][j] = i+j, 
				printf("%d:%d %d\n", i, j, var.m2.m3[i][j]);
}<#

#>
fnc array_test4() : void {
	struct type2 {
		m3: i32[2][3];
	}
	
	struct type {
		m1: i32;
		m2: type2*;
	}

	let var: type* = cast(type*)malloc(1u*sizeof(type));
	var->m2 = cast(type2*)malloc(1u*sizeof(type2));


	for (let i: i32 = 0; i < 2; i += 1)
		for (let j: i32 = 0; j < 3; j += 1)
			var->m2->m3[i][j] = i + j,
				printf("%d:%d %d\n", i, j, var->m2->m3[i][j]);
}
<#

#>
fnc array_test5() : void {
	let size: i32 = 10;
	let var: i16* = calloc(10u, sizeof(i16));
	var[5] = cast(i16)2;
}
<#

#>fnc union_test1() {
	union a {
		m1: i16;
		m2: i32;
	}

	let a: a;
	a.m2 = 4;

	printf("m1: %d, m2: %d", a.m1, a.m2);
}<#

#>fnc enum_test() : void {
	enum {
		SIZE = 10
	}

	let a: i32[SIZE];

	for (let i: i32 = 0; i < SIZE; i += 1)
		a[i] = i+1, printf("%d\n", i);

	printf("%d", SIZE * SIZE);
}<#

fnc entry main() : void {
}

# finish the array accessor