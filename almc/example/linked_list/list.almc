from ../localstd/io import printf;
from ../localstd/memory import malloc, calloc, free;

struct linked_list_item {
	data: i32;
	next: linked_list_item*;
}

struct linked_list {
	head: linked_list_item*;
	tile: linked_list_item*;
}

fnc linked_list_new() : linked_list* {
	return cast(linked_list*)
		calloc(1u, 1u*sizeof(linked_list));
}

fnc linked_list_item_new(data: i32) : linked_list_item* {
	let item: linked_list_item* = cast(linked_list_item*)
		malloc(1u*sizeof(linked_list_item));
	item->data = data;
	item->next = 0;
	return item;
}

fnc linked_list_add(list: linked_list*, data: i32) : void {
	let item: linked_list_item* = 
		linked_list_item_new(data);

	printf("head:%d\n tile:%d\n\n", list->head, list->tile);

	if (list->head == 0) {
		list->head = list->tile = item;
	}
	elif (list->head == list->tile) {
		list->tile = item;
		list->head->next = list->tile;
	}
	else {
		list->tile->next = item;
		list->tile = item;
	}
}

fnc print_linked_list(list: linked_list*) : void {
	for (let item: linked_list_item* = list->head; item; item = item->next)
		printf("%d\n", item->data);
}