#ifndef _ALMC_BACK_END_INSTRUCTIONS_H
#define _ALMC_BACK_END_INSTRUCTIONS_H

#define instr_tostr(instr) (instructions_str[instr]) 

enum x86_64_instruction_set {
	AAA,   AAD,   AAM,   AAS,
	ADC,   ADD,   AND,   CALL,
	CBW,   CLC,   CLD,   CLI,
	CMC,   CMP,   CMPSB, CMPSW,
	CWD,   DAA,   DAS,   DEC,
	DIV,   ESC,   HLT,   IDIV,
	IMUL,  INC,          INTO,
	IRET,  JA,    JAE,   JB,
	JBE,   JC,    JE,    JG,
	JGE,   JL,    JLE,   JNA,
	JNAE,  JNB,   JNBE,  JNC,
	JNE,   JNG,   JNGE,  JNL,
	JNLE,  JNO,   JNP,   JNS,
	JNZ,   JO,    JP,    JPE,
	JPO,   JS,    JZ,    JCXZ,
	JMP,   LAHF,  LDS,   LEA,
	LES,   LOCK,  LODSB, LODSW,
	LOOP,  MOV,   MOVSB, MOVSW,
	MOVSX, MOVZX, MUL,   NEG,
	NOP,   NOT,   OR,    POP,
	POPF,  PUSH,  PUSHF, RCL,
	RCR,   REP,   REPE,  REPNE,
	REPNZ, REPZ,  RET,   RETN,
	RETF,  ROL,   ROR,   SAHF,
	SAL,   SAR,   SBB,   SCASB,
	SCASW, SHL,   SHR,   STC,
	STD,   STI,   STOSB, STOSW,
	SUB,   TEST,  WAIT,  XCHG,
	XLAT,  XOR
};

enum x86_64_SSE_instruction_set {
	MOVSS =    XOR+1,     MOVAPS,      MOVUPS, MOVLPS,
	MOVHPS,    MOVLHPS,   MOVHLPS,     ADDSS,
	SUBSS,     MULSS,     DIVSS,       RCPSS,
	SQRTSS,    MAXSS,     MINSS,       RSQRTSS,
	ADDPS,     SUBPS,     MULPS,       DIVPS,
	RCPPS,     SQRTPS,    MAXPS,       MINPS,
	RSQRTPS,   CMPSS,     COMISS,      UCOMISS,
	CMPPS,     SHUFPS,    UNPCKHPS,    UNPCKLPS,
	CVTSI2SS,  CVTSS2SI,  CVTTSS2SI,   CVTPI2PS,
	CVTPS2PI,  CVTTPS2PI, ANDPS,       ORPS,
	XORPS,     ANDNPS,    PMULHUW,     PSADBW,
	PAVGB,     PAVGW,     PMAXUB,      PMINUB,
	PMAXSW,    PMINSW,    PEXTRW,      PINSRW,
	PMOVMSKB,  PSHUFW,    LDMXCSR,     STMXCSR,
	MOVNTQ,    MOVNTPS,   MASKMOVQ,    PREFETCH0,
	PREFETCH1, PREFETCH2, PREFETCHNTA, SFENCE
};

enum x86_64_almc_instruction_set {
	LABEL = SFENCE + 1, COMMENT
};

static const char* instructions_str[] = {
    [AAA]    = "aaa",
    [AAD]    = "aad",
    [AAM]    = "aam",
    [AAS]    = "aas",
    [ADC]    = "adc",
    [ADD]    = "add",
    [AND]    = "and",
    [CALL]   = "call",
    [CBW]    = "cbw",
    [CLC]    = "clc",
    [CLD]    = "cld",
    [CLI]    = "cli",
    [CMC]    = "cmc",
    [CMP]    = "cmp",
    [CMPSB]  = "cmpsb",
    [CMPSW]  = "cmpsw",
    [CWD]    = "cwd",
    [DAA]    = "daa",
    [DAS]    = "das",
    [DEC]    = "dec",
    [DIV]    = "div",
    [ESC]    = "esc",
    [HLT]    = "hlt",
    [IDIV]   = "idiv",
    [IMUL]   = "imul",
    [INC]    = "inc",
    [INTO]   = "into",
    [IRET]   = "iret",
    [JA]     = "ja",
    [JAE]    = "jae",
    [JB]     = "jb",
    [JBE]    = "jbe",
    [JC]     = "jc",
    [JE]     = "je",
    [JG]     = "jg",
    [JGE]    = "jge",
    [JL]     = "jl",
    [JLE]    = "jle",
    [JNA]    = "jna",
    [JNAE]   = "jnae",
    [JNB]    = "jnb",
    [JNBE]   = "jnbe",
    [JNC]    = "jnc",
    [JNE]    = "jne",
    [JNG]    = "jng",
    [JNGE]   = "jnge",
    [JNL]    = "jnl",
    [JNLE]   = "jnle",
    [JNO]    = "jno",
    [JNP]    = "jnp",
    [JNS]    = "jns",
    [JNZ]    = "jnz",
    [JO]     = "jo",
    [JP]     = "jp",
    [JPE]    = "jpe",
    [JPO]    = "jpo",
    [JS]     = "js",
    [JZ]     = "jz",
    [JCXZ]   = "jcxz",
    [JMP]    = "jmp",
    [LAHF]   = "lahf",
    [LDS]    = "lds",
    [LEA]    = "lea",
    [LES]    = "les",
    [LOCK]   = "lock",
    [LODSB]  = "lodsb",
    [LODSW]  = "lodsw",
    [LOOP]   = "loop",
    [MOV]    = "mov",
    [MOVSB]  = "movsb",
    [MOVSW]  = "movsw",
    [MOVSX]  = "movsx",
    [MOVZX]  = "movzx",
    [MUL]    = "mul",
    [NEG]    = "neg",
    [NOP]    = "nop",
    [NOT]    = "not",
    [OR]     = "or",
    [POP]    = "pop",
    [POPF]   = "popf",
    [PUSH]   = "push",
    [PUSHF]  = "pushf",
    [RCL]    = "rcl",
    [RCR]    = "rcr",
    [REP]    = "rep",
    [REPE]   = "repe",
    [REPNE]  = "repne",
    [REPNZ]  = "repnz",
    [REPZ]   = "repz",
    [RET]    = "ret",
    [RETN]   = "retn",
    [RETF]   = "retf",
    [ROL]    = "rol",
    [ROR]    = "ror",
    [SAHF]   = "sahf",
    [SAL]    = "sal",
    [SAR]    = "sar",
    [SBB]    = "sbb",
    [SCASB]  = "scasb",
    [SCASW]  = "scasw",
    [SHL]    = "shl",
    [SHR]    = "shr",
    [STC]    = "stc",
    [STD]    = "std",
    [STI]    = "sti",
    [STOSB]  = "stosb",
    [STOSW]  = "stosw",
    [SUB]    = "sub",
    [TEST]   = "test",
    [WAIT]   = "wait",
    [XCHG]   = "xchg",
    [XLAT]   = "xlat",
    [XOR]    = "xor",

	// SSE instructions
	[MOVSS]			= "movss",
	[MOVAPS]		= "movaps",
	[MOVUPS]		= "movups",
	[MOVLPS]		= "movlps",
	[MOVHPS]		= "movhps",
	[MOVLHPS]		= "movlhps",
	[MOVHLPS]		= "movhlps",
	[ADDSS]			= "addss",
	[SUBSS]			= "subss",
	[MULSS]			= "mulss",
	[DIVSS]			= "divss",
	[RCPSS]			= "rcpss",
	[SQRTSS]		= "sqrtss",
	[MAXSS]			= "maxss",
	[MINSS]			= "minss",
	[RSQRTSS]		= "rsqrtss",
	[ADDPS]			= "addps",
	[SUBPS]			= "subps",
	[MULPS]			= "mulps",
	[DIVPS]			= "divps",
	[RCPPS]			= "rcpps",
	[SQRTPS]		= "sqrtps",
	[MAXPS]			= "maxps",
	[MINPS]			= "minps",
	[RSQRTPS]		= "rsqrtps",
	[CMPSS]			= "cmpss",
	[COMISS]		= "comiss",
	[UCOMISS]		= "ucomiss",
	[CMPPS]			= "cmpps",
	[SHUFPS]		= "shufps",
	[UNPCKHPS]		= "unpckhps",
	[UNPCKLPS]		= "unpcklps",
	[CVTSI2SS]		= "cvtsi2ss",
	[CVTSS2SI]		= "cvtss2si",
	[CVTTSS2SI]		= "cvttss2si",
	[CVTPI2PS]		= "cvtpi2ps",
	[CVTPS2PI]		= "cvtps2pi",
	[CVTTPS2PI]		= "cvttps2pi",
	[ANDPS]			= "andps",
	[ORPS]			= "orps",
	[XORPS]			= "xorps",
	[ANDNPS]		= "andnps",
	[PMULHUW]		= "pmulhuw",
	[PSADBW]		= "psadbw",
	[PAVGB]			= "pavgb",
	[PAVGW]			= "pavgw",
	[PMAXUB]		= "pmaxub",
	[PMINUB]		= "pminub",
	[PMAXSW]		= "pmaxsw",
	[PMINSW]		= "pminsw",
	[PEXTRW]		= "pextrw",
	[PINSRW]		= "pinsrw",
	[PMOVMSKB]		= "pmovmskb",
	[PSHUFW]		= "pshufw",
	[LDMXCSR]		= "ldmxcsr",
	[STMXCSR]		= "stmxcsr",
	[MOVNTQ]		= "movntq",
	[MOVNTPS]		= "movntps",
	[MASKMOVQ]		= "maskmovq",
	[PREFETCH0]		= "prefetch0",
	[PREFETCH1]		= "prefetch1",
	[PREFETCH2]		= "prefetch2",
	[PREFETCHNTA]	= "prefetchnta",
	[SFENCE]		= "sfence"
};

#endif // _ALMC_BACK_END_INSTRUCTIONS_H